//
// Copyright 2019 AT&T Intellectual Property
// Copyright 2019 Nokia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// This source code is part of the near-RT RIC (RAN Intelligent Controller)
// platform project (RICP).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: x2_setup_failure_response.proto

package entities

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TypeOfError int32

const (
	TypeOfError_UNKNOWN_ERROR  TypeOfError = 0
	TypeOfError_NOT_UNDERSTOOD TypeOfError = 1
	TypeOfError_MISSING        TypeOfError = 2
)

// Enum value maps for TypeOfError.
var (
	TypeOfError_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "NOT_UNDERSTOOD",
		2: "MISSING",
	}
	TypeOfError_value = map[string]int32{
		"UNKNOWN_ERROR":  0,
		"NOT_UNDERSTOOD": 1,
		"MISSING":        2,
	}
)

func (x TypeOfError) Enum() *TypeOfError {
	p := new(TypeOfError)
	*p = x
	return p
}

func (x TypeOfError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeOfError) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[0].Descriptor()
}

func (TypeOfError) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[0]
}

func (x TypeOfError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeOfError.Descriptor instead.
func (TypeOfError) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{0}
}

type TimeToWait int32

const (
	TimeToWait_UNKNOWN_TIMEOUT TimeToWait = 0
	TimeToWait_V1S             TimeToWait = 1
	TimeToWait_V2S             TimeToWait = 2
	TimeToWait_V5S             TimeToWait = 3
	TimeToWait_V10S            TimeToWait = 4
	TimeToWait_V20S            TimeToWait = 5
	TimeToWait_V60S            TimeToWait = 6
)

// Enum value maps for TimeToWait.
var (
	TimeToWait_name = map[int32]string{
		0: "UNKNOWN_TIMEOUT",
		1: "V1S",
		2: "V2S",
		3: "V5S",
		4: "V10S",
		5: "V20S",
		6: "V60S",
	}
	TimeToWait_value = map[string]int32{
		"UNKNOWN_TIMEOUT": 0,
		"V1S":             1,
		"V2S":             2,
		"V5S":             3,
		"V10S":            4,
		"V20S":            5,
		"V60S":            6,
	}
)

func (x TimeToWait) Enum() *TimeToWait {
	p := new(TimeToWait)
	*p = x
	return p
}

func (x TimeToWait) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeToWait) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[1].Descriptor()
}

func (TimeToWait) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[1]
}

func (x TimeToWait) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeToWait.Descriptor instead.
func (TimeToWait) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{1}
}

type TriggeringMessage int32

const (
	TriggeringMessage_UNKNOWN_MESSAGE      TriggeringMessage = 0
	TriggeringMessage_INITIATING_MESSAGE   TriggeringMessage = 1
	TriggeringMessage_SUCCESSFUL_OUTCOME   TriggeringMessage = 2
	TriggeringMessage_UNSUCCESSFUL_OUTCOME TriggeringMessage = 3
)

// Enum value maps for TriggeringMessage.
var (
	TriggeringMessage_name = map[int32]string{
		0: "UNKNOWN_MESSAGE",
		1: "INITIATING_MESSAGE",
		2: "SUCCESSFUL_OUTCOME",
		3: "UNSUCCESSFUL_OUTCOME",
	}
	TriggeringMessage_value = map[string]int32{
		"UNKNOWN_MESSAGE":      0,
		"INITIATING_MESSAGE":   1,
		"SUCCESSFUL_OUTCOME":   2,
		"UNSUCCESSFUL_OUTCOME": 3,
	}
)

func (x TriggeringMessage) Enum() *TriggeringMessage {
	p := new(TriggeringMessage)
	*p = x
	return p
}

func (x TriggeringMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggeringMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[2].Descriptor()
}

func (TriggeringMessage) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[2]
}

func (x TriggeringMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggeringMessage.Descriptor instead.
func (TriggeringMessage) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{2}
}

type Criticality int32

const (
	Criticality_UNKNOWN_CRITICALITY Criticality = 0
	Criticality_REJECT              Criticality = 1
	Criticality_IGNORE              Criticality = 2
	Criticality_NOTIFY              Criticality = 3
)

// Enum value maps for Criticality.
var (
	Criticality_name = map[int32]string{
		0: "UNKNOWN_CRITICALITY",
		1: "REJECT",
		2: "IGNORE",
		3: "NOTIFY",
	}
	Criticality_value = map[string]int32{
		"UNKNOWN_CRITICALITY": 0,
		"REJECT":              1,
		"IGNORE":              2,
		"NOTIFY":              3,
	}
)

func (x Criticality) Enum() *Criticality {
	p := new(Criticality)
	*p = x
	return p
}

func (x Criticality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Criticality) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[3].Descriptor()
}

func (Criticality) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[3]
}

func (x Criticality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Criticality.Descriptor instead.
func (Criticality) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{3}
}

type RadioNetworkLayer_Cause int32

const (
	RadioNetworkLayer_UNKNOWN                                                  RadioNetworkLayer_Cause = 0
	RadioNetworkLayer_HANDOVER_DESIRABLE_FOR_RADIO_REASONS                     RadioNetworkLayer_Cause = 1
	RadioNetworkLayer_TIME_CRITICAL_HANDOVER                                   RadioNetworkLayer_Cause = 2
	RadioNetworkLayer_RESOURCE_OPTIMISATION_HANDOVER                           RadioNetworkLayer_Cause = 3
	RadioNetworkLayer_REDUCE_LOAD_IN_SERVING_CELL                              RadioNetworkLayer_Cause = 4
	RadioNetworkLayer_PARTIAL_HANDOVER                                         RadioNetworkLayer_Cause = 5
	RadioNetworkLayer_UNKNOWN_NEW_ENB_UE_X2AP_ID                               RadioNetworkLayer_Cause = 6
	RadioNetworkLayer_UNKNOWN_OLD_ENBME_UE_X2AP_ID                             RadioNetworkLayer_Cause = 7
	RadioNetworkLayer_UNKNOWN_PAIR_OF_UE_X2AP_ID                               RadioNetworkLayer_Cause = 8
	RadioNetworkLayer_HO_TARGET_NOT_ALLOWED                                    RadioNetworkLayer_Cause = 9
	RadioNetworkLayer_TX2_RELOC_OVERALL_EXPIRY                                 RadioNetworkLayer_Cause = 10
	RadioNetworkLayer_T_RELOC_PREP_EXPIRY                                      RadioNetworkLayer_Cause = 11
	RadioNetworkLayer_CELL_NOT_AVAILABLE                                       RadioNetworkLayer_Cause = 12
	RadioNetworkLayer_NO_RADIO_RESOURCES_AVAILABLE_IN_TARGET_CELL              RadioNetworkLayer_Cause = 13
	RadioNetworkLayer_INVALID_MME_GROUP_ID                                     RadioNetworkLayer_Cause = 14
	RadioNetworkLayer_UNKNOWN_MME_CODE                                         RadioNetworkLayer_Cause = 15
	RadioNetworkLayer_ENCRYPTION_INTEGRITY_PROTECTION_ALGORITHMS_NOT_SUPPORTED RadioNetworkLayer_Cause = 16
	RadioNetworkLayer_REPORT_CHARACTERISTICS_EMPTY                             RadioNetworkLayer_Cause = 17
	RadioNetworkLayer_NO_REPORT_PERIODICITY                                    RadioNetworkLayer_Cause = 18
	RadioNetworkLayer_EXISTING_MEASUREMENT_ID                                  RadioNetworkLayer_Cause = 19
	RadioNetworkLayer_UNKNOWN_ENB_MEASUREMENT_ID                               RadioNetworkLayer_Cause = 20
	RadioNetworkLayer_MEASUREMENT_TEMPORARILY_NOT_AVAILABLE                    RadioNetworkLayer_Cause = 21
	RadioNetworkLayer_UNSPECIFIED                                              RadioNetworkLayer_Cause = 22
	RadioNetworkLayer_LOAD_BALANCING                                           RadioNetworkLayer_Cause = 23
	RadioNetworkLayer_HANDOVER_OPTIMISATION                                    RadioNetworkLayer_Cause = 24
	RadioNetworkLayer_VALUE_OUT_OF_ALLOWED_RANGE                               RadioNetworkLayer_Cause = 25
	RadioNetworkLayer_MULTIPLE_E_RAB_ID_INSTANCES                              RadioNetworkLayer_Cause = 26
	RadioNetworkLayer_SWITCH_OFF_ONGOING                                       RadioNetworkLayer_Cause = 27
	RadioNetworkLayer_NOT_SUPPORTED_QCI_VALUE                                  RadioNetworkLayer_Cause = 28
	RadioNetworkLayer_MEASUREMENT_NOT_SUPPORTED_FOR_THE_OBJECT                 RadioNetworkLayer_Cause = 29
	RadioNetworkLayer_TDC_OVERALL_EXPIRY                                       RadioNetworkLayer_Cause = 30
	RadioNetworkLayer_TDC_PREP_EXPIRY                                          RadioNetworkLayer_Cause = 31
	RadioNetworkLayer_ACTION_DESIRABLE_FOR_RADIO_REASONS                       RadioNetworkLayer_Cause = 32
	RadioNetworkLayer_REDUCE_LOAD                                              RadioNetworkLayer_Cause = 33
	RadioNetworkLayer_RESOURCE_OPTIMISATION                                    RadioNetworkLayer_Cause = 34
	RadioNetworkLayer_TIME_CRITICAL_ACTION                                     RadioNetworkLayer_Cause = 35
	RadioNetworkLayer_TARGET_NOT_ALLOWED                                       RadioNetworkLayer_Cause = 36
	RadioNetworkLayer_NO_RADIO_RESOURCES_AVAILABLE                             RadioNetworkLayer_Cause = 37
	RadioNetworkLayer_INVALID_QOS_COMBINATION                                  RadioNetworkLayer_Cause = 38
	RadioNetworkLayer_ENCRYPTION_ALGORITHMS_NOT_SUPPORTED                      RadioNetworkLayer_Cause = 39
	RadioNetworkLayer_PROCEDURE_CANCELLED                                      RadioNetworkLayer_Cause = 40
	RadioNetworkLayer_RRM_PURPOSE                                              RadioNetworkLayer_Cause = 41
	RadioNetworkLayer_IMPROVE_USER_BIT_RATE                                    RadioNetworkLayer_Cause = 42
	RadioNetworkLayer_USER_INACTIVITY                                          RadioNetworkLayer_Cause = 43
	RadioNetworkLayer_RADIO_CONNECTION_WITH_UE_LOST                            RadioNetworkLayer_Cause = 44
	RadioNetworkLayer_FAILURE_IN_THE_RADIO_INTERFACE_PROCEDURE                 RadioNetworkLayer_Cause = 45
	RadioNetworkLayer_BEARER_OPTION_NOT_SUPPORTED                              RadioNetworkLayer_Cause = 46
	RadioNetworkLayer_MCG_MOBILITY                                             RadioNetworkLayer_Cause = 47
	RadioNetworkLayer_SCG_MOBILITY                                             RadioNetworkLayer_Cause = 48
	RadioNetworkLayer_COUNT_REACHES_MAX_VALUE                                  RadioNetworkLayer_Cause = 49
	RadioNetworkLayer_UNKNOWN_OLD_EN_GNB_UE_X2AP_ID                            RadioNetworkLayer_Cause = 50
	RadioNetworkLayer_PDCP_OVERLOAD                                            RadioNetworkLayer_Cause = 51
)

// Enum value maps for RadioNetworkLayer_Cause.
var (
	RadioNetworkLayer_Cause_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "HANDOVER_DESIRABLE_FOR_RADIO_REASONS",
		2:  "TIME_CRITICAL_HANDOVER",
		3:  "RESOURCE_OPTIMISATION_HANDOVER",
		4:  "REDUCE_LOAD_IN_SERVING_CELL",
		5:  "PARTIAL_HANDOVER",
		6:  "UNKNOWN_NEW_ENB_UE_X2AP_ID",
		7:  "UNKNOWN_OLD_ENBME_UE_X2AP_ID",
		8:  "UNKNOWN_PAIR_OF_UE_X2AP_ID",
		9:  "HO_TARGET_NOT_ALLOWED",
		10: "TX2_RELOC_OVERALL_EXPIRY",
		11: "T_RELOC_PREP_EXPIRY",
		12: "CELL_NOT_AVAILABLE",
		13: "NO_RADIO_RESOURCES_AVAILABLE_IN_TARGET_CELL",
		14: "INVALID_MME_GROUP_ID",
		15: "UNKNOWN_MME_CODE",
		16: "ENCRYPTION_INTEGRITY_PROTECTION_ALGORITHMS_NOT_SUPPORTED",
		17: "REPORT_CHARACTERISTICS_EMPTY",
		18: "NO_REPORT_PERIODICITY",
		19: "EXISTING_MEASUREMENT_ID",
		20: "UNKNOWN_ENB_MEASUREMENT_ID",
		21: "MEASUREMENT_TEMPORARILY_NOT_AVAILABLE",
		22: "UNSPECIFIED",
		23: "LOAD_BALANCING",
		24: "HANDOVER_OPTIMISATION",
		25: "VALUE_OUT_OF_ALLOWED_RANGE",
		26: "MULTIPLE_E_RAB_ID_INSTANCES",
		27: "SWITCH_OFF_ONGOING",
		28: "NOT_SUPPORTED_QCI_VALUE",
		29: "MEASUREMENT_NOT_SUPPORTED_FOR_THE_OBJECT",
		30: "TDC_OVERALL_EXPIRY",
		31: "TDC_PREP_EXPIRY",
		32: "ACTION_DESIRABLE_FOR_RADIO_REASONS",
		33: "REDUCE_LOAD",
		34: "RESOURCE_OPTIMISATION",
		35: "TIME_CRITICAL_ACTION",
		36: "TARGET_NOT_ALLOWED",
		37: "NO_RADIO_RESOURCES_AVAILABLE",
		38: "INVALID_QOS_COMBINATION",
		39: "ENCRYPTION_ALGORITHMS_NOT_SUPPORTED",
		40: "PROCEDURE_CANCELLED",
		41: "RRM_PURPOSE",
		42: "IMPROVE_USER_BIT_RATE",
		43: "USER_INACTIVITY",
		44: "RADIO_CONNECTION_WITH_UE_LOST",
		45: "FAILURE_IN_THE_RADIO_INTERFACE_PROCEDURE",
		46: "BEARER_OPTION_NOT_SUPPORTED",
		47: "MCG_MOBILITY",
		48: "SCG_MOBILITY",
		49: "COUNT_REACHES_MAX_VALUE",
		50: "UNKNOWN_OLD_EN_GNB_UE_X2AP_ID",
		51: "PDCP_OVERLOAD",
	}
	RadioNetworkLayer_Cause_value = map[string]int32{
		"UNKNOWN":                                                  0,
		"HANDOVER_DESIRABLE_FOR_RADIO_REASONS":                     1,
		"TIME_CRITICAL_HANDOVER":                                   2,
		"RESOURCE_OPTIMISATION_HANDOVER":                           3,
		"REDUCE_LOAD_IN_SERVING_CELL":                              4,
		"PARTIAL_HANDOVER":                                         5,
		"UNKNOWN_NEW_ENB_UE_X2AP_ID":                               6,
		"UNKNOWN_OLD_ENBME_UE_X2AP_ID":                             7,
		"UNKNOWN_PAIR_OF_UE_X2AP_ID":                               8,
		"HO_TARGET_NOT_ALLOWED":                                    9,
		"TX2_RELOC_OVERALL_EXPIRY":                                 10,
		"T_RELOC_PREP_EXPIRY":                                      11,
		"CELL_NOT_AVAILABLE":                                       12,
		"NO_RADIO_RESOURCES_AVAILABLE_IN_TARGET_CELL":              13,
		"INVALID_MME_GROUP_ID":                                     14,
		"UNKNOWN_MME_CODE":                                         15,
		"ENCRYPTION_INTEGRITY_PROTECTION_ALGORITHMS_NOT_SUPPORTED": 16,
		"REPORT_CHARACTERISTICS_EMPTY":                             17,
		"NO_REPORT_PERIODICITY":                                    18,
		"EXISTING_MEASUREMENT_ID":                                  19,
		"UNKNOWN_ENB_MEASUREMENT_ID":                               20,
		"MEASUREMENT_TEMPORARILY_NOT_AVAILABLE":                    21,
		"UNSPECIFIED":                                              22,
		"LOAD_BALANCING":                                           23,
		"HANDOVER_OPTIMISATION":                                    24,
		"VALUE_OUT_OF_ALLOWED_RANGE":                               25,
		"MULTIPLE_E_RAB_ID_INSTANCES":                              26,
		"SWITCH_OFF_ONGOING":                                       27,
		"NOT_SUPPORTED_QCI_VALUE":                                  28,
		"MEASUREMENT_NOT_SUPPORTED_FOR_THE_OBJECT":                 29,
		"TDC_OVERALL_EXPIRY":                                       30,
		"TDC_PREP_EXPIRY":                                          31,
		"ACTION_DESIRABLE_FOR_RADIO_REASONS":                       32,
		"REDUCE_LOAD":                                              33,
		"RESOURCE_OPTIMISATION":                                    34,
		"TIME_CRITICAL_ACTION":                                     35,
		"TARGET_NOT_ALLOWED":                                       36,
		"NO_RADIO_RESOURCES_AVAILABLE":                             37,
		"INVALID_QOS_COMBINATION":                                  38,
		"ENCRYPTION_ALGORITHMS_NOT_SUPPORTED":                      39,
		"PROCEDURE_CANCELLED":                                      40,
		"RRM_PURPOSE":                                              41,
		"IMPROVE_USER_BIT_RATE":                                    42,
		"USER_INACTIVITY":                                          43,
		"RADIO_CONNECTION_WITH_UE_LOST":                            44,
		"FAILURE_IN_THE_RADIO_INTERFACE_PROCEDURE":                 45,
		"BEARER_OPTION_NOT_SUPPORTED":                              46,
		"MCG_MOBILITY":                                             47,
		"SCG_MOBILITY":                                             48,
		"COUNT_REACHES_MAX_VALUE":                                  49,
		"UNKNOWN_OLD_EN_GNB_UE_X2AP_ID":                            50,
		"PDCP_OVERLOAD":                                            51,
	}
)

func (x RadioNetworkLayer_Cause) Enum() *RadioNetworkLayer_Cause {
	p := new(RadioNetworkLayer_Cause)
	*p = x
	return p
}

func (x RadioNetworkLayer_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioNetworkLayer_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[4].Descriptor()
}

func (RadioNetworkLayer_Cause) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[4]
}

func (x RadioNetworkLayer_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioNetworkLayer_Cause.Descriptor instead.
func (RadioNetworkLayer_Cause) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{1, 0}
}

type TransportLayer_Cause int32

const (
	TransportLayer_UNKNOWN                        TransportLayer_Cause = 0
	TransportLayer_TRANSPORT_RESOURCE_UNAVAILABLE TransportLayer_Cause = 1
	TransportLayer_UNSPECIFIED                    TransportLayer_Cause = 2
)

// Enum value maps for TransportLayer_Cause.
var (
	TransportLayer_Cause_name = map[int32]string{
		0: "UNKNOWN",
		1: "TRANSPORT_RESOURCE_UNAVAILABLE",
		2: "UNSPECIFIED",
	}
	TransportLayer_Cause_value = map[string]int32{
		"UNKNOWN":                        0,
		"TRANSPORT_RESOURCE_UNAVAILABLE": 1,
		"UNSPECIFIED":                    2,
	}
)

func (x TransportLayer_Cause) Enum() *TransportLayer_Cause {
	p := new(TransportLayer_Cause)
	*p = x
	return p
}

func (x TransportLayer_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportLayer_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[5].Descriptor()
}

func (TransportLayer_Cause) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[5]
}

func (x TransportLayer_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportLayer_Cause.Descriptor instead.
func (TransportLayer_Cause) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{2, 0}
}

type Protocol_Cause int32

const (
	Protocol_UNKNOWN                                           Protocol_Cause = 0
	Protocol_TRANSFER_SYNTAX_ERROR                             Protocol_Cause = 1
	Protocol_ABSTRACT_SYNTAX_ERROR_REJECT                      Protocol_Cause = 2
	Protocol_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY           Protocol_Cause = 3
	Protocol_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE        Protocol_Cause = 4
	Protocol_SEMANTIC_ERROR                                    Protocol_Cause = 5
	Protocol_UNSPECIFIED                                       Protocol_Cause = 6
	Protocol_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE Protocol_Cause = 7
)

// Enum value maps for Protocol_Cause.
var (
	Protocol_Cause_name = map[int32]string{
		0: "UNKNOWN",
		1: "TRANSFER_SYNTAX_ERROR",
		2: "ABSTRACT_SYNTAX_ERROR_REJECT",
		3: "ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY",
		4: "MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE",
		5: "SEMANTIC_ERROR",
		6: "UNSPECIFIED",
		7: "ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE",
	}
	Protocol_Cause_value = map[string]int32{
		"UNKNOWN":                                           0,
		"TRANSFER_SYNTAX_ERROR":                             1,
		"ABSTRACT_SYNTAX_ERROR_REJECT":                      2,
		"ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY":           3,
		"MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE":        4,
		"SEMANTIC_ERROR":                                    5,
		"UNSPECIFIED":                                       6,
		"ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE": 7,
	}
)

func (x Protocol_Cause) Enum() *Protocol_Cause {
	p := new(Protocol_Cause)
	*p = x
	return p
}

func (x Protocol_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[6].Descriptor()
}

func (Protocol_Cause) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[6]
}

func (x Protocol_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_Cause.Descriptor instead.
func (Protocol_Cause) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{3, 0}
}

type Miscellaneous_Cause int32

const (
	Miscellaneous_UNKNOWN                                    Miscellaneous_Cause = 0
	Miscellaneous_CONTROL_PROCESSING_OVERLOAD                Miscellaneous_Cause = 1
	Miscellaneous_HARDWARE_FAILURE                           Miscellaneous_Cause = 2
	Miscellaneous_OM_INTERVENTION                            Miscellaneous_Cause = 3
	Miscellaneous_NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES Miscellaneous_Cause = 4
	Miscellaneous_UNSPECIFIED                                Miscellaneous_Cause = 5
)

// Enum value maps for Miscellaneous_Cause.
var (
	Miscellaneous_Cause_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONTROL_PROCESSING_OVERLOAD",
		2: "HARDWARE_FAILURE",
		3: "OM_INTERVENTION",
		4: "NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES",
		5: "UNSPECIFIED",
	}
	Miscellaneous_Cause_value = map[string]int32{
		"UNKNOWN":                     0,
		"CONTROL_PROCESSING_OVERLOAD": 1,
		"HARDWARE_FAILURE":            2,
		"OM_INTERVENTION":             3,
		"NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES": 4,
		"UNSPECIFIED": 5,
	}
)

func (x Miscellaneous_Cause) Enum() *Miscellaneous_Cause {
	p := new(Miscellaneous_Cause)
	*p = x
	return p
}

func (x Miscellaneous_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Miscellaneous_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_x2_setup_failure_response_proto_enumTypes[7].Descriptor()
}

func (Miscellaneous_Cause) Type() protoreflect.EnumType {
	return &file_x2_setup_failure_response_proto_enumTypes[7]
}

func (x Miscellaneous_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Miscellaneous_Cause.Descriptor instead.
func (Miscellaneous_Cause) EnumDescriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{4, 0}
}

type SetupFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CauseGroup:
	//	*SetupFailure_NetworkLayerCause
	//	*SetupFailure_TransportLayerCause
	//	*SetupFailure_ProtocolCause
	//	*SetupFailure_MiscellaneousCause
	CauseGroup             isSetupFailure_CauseGroup `protobuf_oneof:"cause_group"`
	TimeToWait             TimeToWait                `protobuf:"varint,5,opt,name=time_to_wait,json=timeToWait,proto3,enum=entities.TimeToWait" json:"time_to_wait,omitempty"`
	CriticalityDiagnostics *CriticalityDiagnostics   `protobuf:"bytes,6,opt,name=criticality_diagnostics,json=criticalityDiagnostics,proto3" json:"criticality_diagnostics,omitempty"`
}

func (x *SetupFailure) Reset() {
	*x = SetupFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x2_setup_failure_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupFailure) ProtoMessage() {}

func (x *SetupFailure) ProtoReflect() protoreflect.Message {
	mi := &file_x2_setup_failure_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupFailure.ProtoReflect.Descriptor instead.
func (*SetupFailure) Descriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{0}
}

func (m *SetupFailure) GetCauseGroup() isSetupFailure_CauseGroup {
	if m != nil {
		return m.CauseGroup
	}
	return nil
}

func (x *SetupFailure) GetNetworkLayerCause() RadioNetworkLayer_Cause {
	if x, ok := x.GetCauseGroup().(*SetupFailure_NetworkLayerCause); ok {
		return x.NetworkLayerCause
	}
	return RadioNetworkLayer_UNKNOWN
}

func (x *SetupFailure) GetTransportLayerCause() TransportLayer_Cause {
	if x, ok := x.GetCauseGroup().(*SetupFailure_TransportLayerCause); ok {
		return x.TransportLayerCause
	}
	return TransportLayer_UNKNOWN
}

func (x *SetupFailure) GetProtocolCause() Protocol_Cause {
	if x, ok := x.GetCauseGroup().(*SetupFailure_ProtocolCause); ok {
		return x.ProtocolCause
	}
	return Protocol_UNKNOWN
}

func (x *SetupFailure) GetMiscellaneousCause() Miscellaneous_Cause {
	if x, ok := x.GetCauseGroup().(*SetupFailure_MiscellaneousCause); ok {
		return x.MiscellaneousCause
	}
	return Miscellaneous_UNKNOWN
}

func (x *SetupFailure) GetTimeToWait() TimeToWait {
	if x != nil {
		return x.TimeToWait
	}
	return TimeToWait_UNKNOWN_TIMEOUT
}

func (x *SetupFailure) GetCriticalityDiagnostics() *CriticalityDiagnostics {
	if x != nil {
		return x.CriticalityDiagnostics
	}
	return nil
}

type isSetupFailure_CauseGroup interface {
	isSetupFailure_CauseGroup()
}

type SetupFailure_NetworkLayerCause struct {
	NetworkLayerCause RadioNetworkLayer_Cause `protobuf:"varint,1,opt,name=network_layer_cause,json=networkLayerCause,proto3,enum=entities.RadioNetworkLayer_Cause,oneof"`
}

type SetupFailure_TransportLayerCause struct {
	TransportLayerCause TransportLayer_Cause `protobuf:"varint,2,opt,name=transport_layer_cause,json=transportLayerCause,proto3,enum=entities.TransportLayer_Cause,oneof"`
}

type SetupFailure_ProtocolCause struct {
	ProtocolCause Protocol_Cause `protobuf:"varint,3,opt,name=protocol_cause,json=protocolCause,proto3,enum=entities.Protocol_Cause,oneof"`
}

type SetupFailure_MiscellaneousCause struct {
	MiscellaneousCause Miscellaneous_Cause `protobuf:"varint,4,opt,name=miscellaneous_cause,json=miscellaneousCause,proto3,enum=entities.Miscellaneous_Cause,oneof"`
}

func (*SetupFailure_NetworkLayerCause) isSetupFailure_CauseGroup() {}

func (*SetupFailure_TransportLayerCause) isSetupFailure_CauseGroup() {}

func (*SetupFailure_ProtocolCause) isSetupFailure_CauseGroup() {}

func (*SetupFailure_MiscellaneousCause) isSetupFailure_CauseGroup() {}

type RadioNetworkLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RadioNetworkLayer) Reset() {
	*x = RadioNetworkLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x2_setup_failure_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioNetworkLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioNetworkLayer) ProtoMessage() {}

func (x *RadioNetworkLayer) ProtoReflect() protoreflect.Message {
	mi := &file_x2_setup_failure_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioNetworkLayer.ProtoReflect.Descriptor instead.
func (*RadioNetworkLayer) Descriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{1}
}

type TransportLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransportLayer) Reset() {
	*x = TransportLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x2_setup_failure_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportLayer) ProtoMessage() {}

func (x *TransportLayer) ProtoReflect() protoreflect.Message {
	mi := &file_x2_setup_failure_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportLayer.ProtoReflect.Descriptor instead.
func (*TransportLayer) Descriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{2}
}

type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x2_setup_failure_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_x2_setup_failure_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{3}
}

type Miscellaneous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Miscellaneous) Reset() {
	*x = Miscellaneous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x2_setup_failure_response_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Miscellaneous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Miscellaneous) ProtoMessage() {}

func (x *Miscellaneous) ProtoReflect() protoreflect.Message {
	mi := &file_x2_setup_failure_response_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Miscellaneous.ProtoReflect.Descriptor instead.
func (*Miscellaneous) Descriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{4}
}

type CriticalityDiagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureCode                            uint32                                     `protobuf:"varint,1,opt,name=procedure_code,json=procedureCode,proto3" json:"procedure_code,omitempty"`
	TriggeringMessage                        TriggeringMessage                          `protobuf:"varint,2,opt,name=triggering_message,json=triggeringMessage,proto3,enum=entities.TriggeringMessage" json:"triggering_message,omitempty"`
	ProcedureCriticality                     Criticality                                `protobuf:"varint,3,opt,name=procedure_criticality,json=procedureCriticality,proto3,enum=entities.Criticality" json:"procedure_criticality,omitempty"`
	InformationElementCriticalityDiagnostics []*InformationElementCriticalityDiagnostic `protobuf:"bytes,4,rep,name=information_element_criticality_diagnostics,json=informationElementCriticalityDiagnostics,proto3" json:"information_element_criticality_diagnostics,omitempty"`
}

func (x *CriticalityDiagnostics) Reset() {
	*x = CriticalityDiagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x2_setup_failure_response_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriticalityDiagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriticalityDiagnostics) ProtoMessage() {}

func (x *CriticalityDiagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_x2_setup_failure_response_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriticalityDiagnostics.ProtoReflect.Descriptor instead.
func (*CriticalityDiagnostics) Descriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{5}
}

func (x *CriticalityDiagnostics) GetProcedureCode() uint32 {
	if x != nil {
		return x.ProcedureCode
	}
	return 0
}

func (x *CriticalityDiagnostics) GetTriggeringMessage() TriggeringMessage {
	if x != nil {
		return x.TriggeringMessage
	}
	return TriggeringMessage_UNKNOWN_MESSAGE
}

func (x *CriticalityDiagnostics) GetProcedureCriticality() Criticality {
	if x != nil {
		return x.ProcedureCriticality
	}
	return Criticality_UNKNOWN_CRITICALITY
}

func (x *CriticalityDiagnostics) GetInformationElementCriticalityDiagnostics() []*InformationElementCriticalityDiagnostic {
	if x != nil {
		return x.InformationElementCriticalityDiagnostics
	}
	return nil
}

type InformationElementCriticalityDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IeCriticality Criticality `protobuf:"varint,1,opt,name=ie_criticality,json=ieCriticality,proto3,enum=entities.Criticality" json:"ie_criticality,omitempty"`
	IeId          uint32      `protobuf:"varint,2,opt,name=ie_id,json=ieId,proto3" json:"ie_id,omitempty"`
	TypeOfError   TypeOfError `protobuf:"varint,3,opt,name=type_of_error,json=typeOfError,proto3,enum=entities.TypeOfError" json:"type_of_error,omitempty"`
}

func (x *InformationElementCriticalityDiagnostic) Reset() {
	*x = InformationElementCriticalityDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x2_setup_failure_response_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InformationElementCriticalityDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformationElementCriticalityDiagnostic) ProtoMessage() {}

func (x *InformationElementCriticalityDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_x2_setup_failure_response_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformationElementCriticalityDiagnostic.ProtoReflect.Descriptor instead.
func (*InformationElementCriticalityDiagnostic) Descriptor() ([]byte, []int) {
	return file_x2_setup_failure_response_proto_rawDescGZIP(), []int{6}
}

func (x *InformationElementCriticalityDiagnostic) GetIeCriticality() Criticality {
	if x != nil {
		return x.IeCriticality
	}
	return Criticality_UNKNOWN_CRITICALITY
}

func (x *InformationElementCriticalityDiagnostic) GetIeId() uint32 {
	if x != nil {
		return x.IeId
	}
	return 0
}

func (x *InformationElementCriticalityDiagnostic) GetTypeOfError() TypeOfError {
	if x != nil {
		return x.TypeOfError
	}
	return TypeOfError_UNKNOWN_ERROR
}

var File_x2_setup_failure_response_proto protoreflect.FileDescriptor

var file_x2_setup_failure_response_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x78, 0x32, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xf0, 0x03, 0x0a, 0x0c,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x13,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x6d, 0x69,
	0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73,
	0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x57, 0x61, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x16, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9d,
	0x0c, 0x0a, 0x11, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x22, 0x87, 0x0c, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x48,
	0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x52, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4d, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x4e, 0x42, 0x5f,
	0x55, 0x45, 0x5f, 0x58, 0x32, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x42, 0x4d,
	0x45, 0x5f, 0x55, 0x45, 0x5f, 0x58, 0x32, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x4f,
	0x46, 0x5f, 0x55, 0x45, 0x5f, 0x58, 0x32, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x48, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x58, 0x32,
	0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x5f, 0x52, 0x45, 0x4c,
	0x4f, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x0b,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x4f, 0x5f, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49,
	0x44, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d,
	0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x3c, 0x0a, 0x38, 0x45, 0x4e, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x49,
	0x54, 0x59, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x4e, 0x42,
	0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x14, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x16, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10,
	0x17, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4d, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x5f, 0x52, 0x41, 0x42, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x1a, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x4f, 0x4e, 0x47, 0x4f,
	0x49, 0x4e, 0x47, 0x10, 0x1b, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x51, 0x43, 0x49, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x1c, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x1d,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x44, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x44, 0x43, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x1f, 0x12, 0x26, 0x0a,
	0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x52, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x53, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x22, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x24, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x26, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x52, 0x4d, 0x5f, 0x50, 0x55, 0x52, 0x50,
	0x4f, 0x53, 0x45, 0x10, 0x29, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4d, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x2a,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x10, 0x2b, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55,
	0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x2c, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x44, 0x55, 0x52, 0x45, 0x10, 0x2d, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x43, 0x47, 0x5f, 0x4d,
	0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x2f, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x47,
	0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x30, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x31, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x5f, 0x47, 0x4e, 0x42, 0x5f, 0x55,
	0x45, 0x5f, 0x58, 0x32, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x44, 0x43, 0x50, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x33, 0x22, 0x5b,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x22, 0x49, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x22, 0x97, 0x02, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x8a, 0x02, 0x0a, 0x05, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x54,
	0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x42,
	0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27,
	0x41, 0x42, 0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4d,
	0x41, 0x4e, 0x54, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x35,
	0x0a, 0x31, 0x41, 0x42, 0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x4c, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x07, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x22, 0xea, 0x02, 0x0a, 0x16,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a,
	0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x2b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x28,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x27, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0d, 0x69, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x69, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2a, 0x41, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x52, 0x53, 0x54, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57,
	0x61, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x31, 0x53, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x32, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x35,
	0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x31, 0x30, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x56, 0x32, 0x30, 0x53, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x36, 0x30, 0x53, 0x10,
	0x06, 0x2a, 0x72, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55,
	0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x4e, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x43,
	0x4f, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e,
	0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10,
	0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_x2_setup_failure_response_proto_rawDescOnce sync.Once
	file_x2_setup_failure_response_proto_rawDescData = file_x2_setup_failure_response_proto_rawDesc
)

func file_x2_setup_failure_response_proto_rawDescGZIP() []byte {
	file_x2_setup_failure_response_proto_rawDescOnce.Do(func() {
		file_x2_setup_failure_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_x2_setup_failure_response_proto_rawDescData)
	})
	return file_x2_setup_failure_response_proto_rawDescData
}

var file_x2_setup_failure_response_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_x2_setup_failure_response_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_x2_setup_failure_response_proto_goTypes = []interface{}{
	(TypeOfError)(0),                                // 0: entities.TypeOfError
	(TimeToWait)(0),                                 // 1: entities.TimeToWait
	(TriggeringMessage)(0),                          // 2: entities.TriggeringMessage
	(Criticality)(0),                                // 3: entities.Criticality
	(RadioNetworkLayer_Cause)(0),                    // 4: entities.RadioNetworkLayer.Cause
	(TransportLayer_Cause)(0),                       // 5: entities.TransportLayer.Cause
	(Protocol_Cause)(0),                             // 6: entities.Protocol.Cause
	(Miscellaneous_Cause)(0),                        // 7: entities.Miscellaneous.Cause
	(*SetupFailure)(nil),                            // 8: entities.SetupFailure
	(*RadioNetworkLayer)(nil),                       // 9: entities.RadioNetworkLayer
	(*TransportLayer)(nil),                          // 10: entities.TransportLayer
	(*Protocol)(nil),                                // 11: entities.Protocol
	(*Miscellaneous)(nil),                           // 12: entities.Miscellaneous
	(*CriticalityDiagnostics)(nil),                  // 13: entities.CriticalityDiagnostics
	(*InformationElementCriticalityDiagnostic)(nil), // 14: entities.InformationElementCriticalityDiagnostic
}
var file_x2_setup_failure_response_proto_depIdxs = []int32{
	4,  // 0: entities.SetupFailure.network_layer_cause:type_name -> entities.RadioNetworkLayer.Cause
	5,  // 1: entities.SetupFailure.transport_layer_cause:type_name -> entities.TransportLayer.Cause
	6,  // 2: entities.SetupFailure.protocol_cause:type_name -> entities.Protocol.Cause
	7,  // 3: entities.SetupFailure.miscellaneous_cause:type_name -> entities.Miscellaneous.Cause
	1,  // 4: entities.SetupFailure.time_to_wait:type_name -> entities.TimeToWait
	13, // 5: entities.SetupFailure.criticality_diagnostics:type_name -> entities.CriticalityDiagnostics
	2,  // 6: entities.CriticalityDiagnostics.triggering_message:type_name -> entities.TriggeringMessage
	3,  // 7: entities.CriticalityDiagnostics.procedure_criticality:type_name -> entities.Criticality
	14, // 8: entities.CriticalityDiagnostics.information_element_criticality_diagnostics:type_name -> entities.InformationElementCriticalityDiagnostic
	3,  // 9: entities.InformationElementCriticalityDiagnostic.ie_criticality:type_name -> entities.Criticality
	0,  // 10: entities.InformationElementCriticalityDiagnostic.type_of_error:type_name -> entities.TypeOfError
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_x2_setup_failure_response_proto_init() }
func file_x2_setup_failure_response_proto_init() {
	if File_x2_setup_failure_response_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_x2_setup_failure_response_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x2_setup_failure_response_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioNetworkLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x2_setup_failure_response_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x2_setup_failure_response_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x2_setup_failure_response_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Miscellaneous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x2_setup_failure_response_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriticalityDiagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x2_setup_failure_response_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InformationElementCriticalityDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_x2_setup_failure_response_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SetupFailure_NetworkLayerCause)(nil),
		(*SetupFailure_TransportLayerCause)(nil),
		(*SetupFailure_ProtocolCause)(nil),
		(*SetupFailure_MiscellaneousCause)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_x2_setup_failure_response_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_x2_setup_failure_response_proto_goTypes,
		DependencyIndexes: file_x2_setup_failure_response_proto_depIdxs,
		EnumInfos:         file_x2_setup_failure_response_proto_enumTypes,
		MessageInfos:      file_x2_setup_failure_response_proto_msgTypes,
	}.Build()
	File_x2_setup_failure_response_proto = out.File
	file_x2_setup_failure_response_proto_rawDesc = nil
	file_x2_setup_failure_response_proto_goTypes = nil
	file_x2_setup_failure_response_proto_depIdxs = nil
}
