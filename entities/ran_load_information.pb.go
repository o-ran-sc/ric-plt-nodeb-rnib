//
// Copyright 2019 AT&T Intellectual Property
// Copyright 2019 Nokia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// This source code is part of the near-RT RIC (RAN Intelligent Controller)
// platform project (RICP).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: ran_load_information.proto

package entities

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 9.2.17
type UlInterferenceOverloadIndication int32

const (
	UlInterferenceOverloadIndication_UNKNOWN_UL_INTERFERENCE_OVERLOAD_INDICATION UlInterferenceOverloadIndication = 0
	UlInterferenceOverloadIndication_HIGH_INTERFERENCE                           UlInterferenceOverloadIndication = 1
	UlInterferenceOverloadIndication_MEDIUM_INTERFERENCE                         UlInterferenceOverloadIndication = 2
	UlInterferenceOverloadIndication_LOW_INTERFERENCE                            UlInterferenceOverloadIndication = 3
)

// Enum value maps for UlInterferenceOverloadIndication.
var (
	UlInterferenceOverloadIndication_name = map[int32]string{
		0: "UNKNOWN_UL_INTERFERENCE_OVERLOAD_INDICATION",
		1: "HIGH_INTERFERENCE",
		2: "MEDIUM_INTERFERENCE",
		3: "LOW_INTERFERENCE",
	}
	UlInterferenceOverloadIndication_value = map[string]int32{
		"UNKNOWN_UL_INTERFERENCE_OVERLOAD_INDICATION": 0,
		"HIGH_INTERFERENCE":                           1,
		"MEDIUM_INTERFERENCE":                         2,
		"LOW_INTERFERENCE":                            3,
	}
)

func (x UlInterferenceOverloadIndication) Enum() *UlInterferenceOverloadIndication {
	p := new(UlInterferenceOverloadIndication)
	*p = x
	return p
}

func (x UlInterferenceOverloadIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UlInterferenceOverloadIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_ran_load_information_proto_enumTypes[0].Descriptor()
}

func (UlInterferenceOverloadIndication) Type() protoreflect.EnumType {
	return &file_ran_load_information_proto_enumTypes[0]
}

func (x UlInterferenceOverloadIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UlInterferenceOverloadIndication.Descriptor instead.
func (UlInterferenceOverloadIndication) EnumDescriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{0}
}

type RntpThreshold int32

const (
	RntpThreshold_UNKNOWN_RNTP_THRESHOLD RntpThreshold = 0
	RntpThreshold_NEG_INFINITY           RntpThreshold = 1
	RntpThreshold_NEG_11                 RntpThreshold = 2
	RntpThreshold_NEG_10                 RntpThreshold = 3
	RntpThreshold_NEG_9                  RntpThreshold = 4
	RntpThreshold_NEG_8                  RntpThreshold = 5
	RntpThreshold_NEG_7                  RntpThreshold = 6
	RntpThreshold_NEG_6                  RntpThreshold = 7
	RntpThreshold_NEG_5                  RntpThreshold = 8
	RntpThreshold_NEG_4                  RntpThreshold = 9
	RntpThreshold_NEG_3                  RntpThreshold = 10
	RntpThreshold_NEG_2                  RntpThreshold = 11
	RntpThreshold_NEG_1                  RntpThreshold = 12
	RntpThreshold_V0                     RntpThreshold = 13
	RntpThreshold_V1                     RntpThreshold = 14
	RntpThreshold_V2                     RntpThreshold = 15
	RntpThreshold_V3                     RntpThreshold = 16
)

// Enum value maps for RntpThreshold.
var (
	RntpThreshold_name = map[int32]string{
		0:  "UNKNOWN_RNTP_THRESHOLD",
		1:  "NEG_INFINITY",
		2:  "NEG_11",
		3:  "NEG_10",
		4:  "NEG_9",
		5:  "NEG_8",
		6:  "NEG_7",
		7:  "NEG_6",
		8:  "NEG_5",
		9:  "NEG_4",
		10: "NEG_3",
		11: "NEG_2",
		12: "NEG_1",
		13: "V0",
		14: "V1",
		15: "V2",
		16: "V3",
	}
	RntpThreshold_value = map[string]int32{
		"UNKNOWN_RNTP_THRESHOLD": 0,
		"NEG_INFINITY":           1,
		"NEG_11":                 2,
		"NEG_10":                 3,
		"NEG_9":                  4,
		"NEG_8":                  5,
		"NEG_7":                  6,
		"NEG_6":                  7,
		"NEG_5":                  8,
		"NEG_4":                  9,
		"NEG_3":                  10,
		"NEG_2":                  11,
		"NEG_1":                  12,
		"V0":                     13,
		"V1":                     14,
		"V2":                     15,
		"V3":                     16,
	}
)

func (x RntpThreshold) Enum() *RntpThreshold {
	p := new(RntpThreshold)
	*p = x
	return p
}

func (x RntpThreshold) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RntpThreshold) Descriptor() protoreflect.EnumDescriptor {
	return file_ran_load_information_proto_enumTypes[1].Descriptor()
}

func (RntpThreshold) Type() protoreflect.EnumType {
	return &file_ran_load_information_proto_enumTypes[1]
}

func (x RntpThreshold) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RntpThreshold.Descriptor instead.
func (RntpThreshold) EnumDescriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{1}
}

type NumberOfCellSpecificAntennaPorts int32

const (
	NumberOfCellSpecificAntennaPorts_UNKNOWN_NUMBER_OF_CELL_SPECIFIC_ANTENNA_PORTS NumberOfCellSpecificAntennaPorts = 0
	NumberOfCellSpecificAntennaPorts_V1_ANT_PRT                                    NumberOfCellSpecificAntennaPorts = 1
	NumberOfCellSpecificAntennaPorts_V2_ANT_PRT                                    NumberOfCellSpecificAntennaPorts = 2
	NumberOfCellSpecificAntennaPorts_V4_ANT_PRT                                    NumberOfCellSpecificAntennaPorts = 4
)

// Enum value maps for NumberOfCellSpecificAntennaPorts.
var (
	NumberOfCellSpecificAntennaPorts_name = map[int32]string{
		0: "UNKNOWN_NUMBER_OF_CELL_SPECIFIC_ANTENNA_PORTS",
		1: "V1_ANT_PRT",
		2: "V2_ANT_PRT",
		4: "V4_ANT_PRT",
	}
	NumberOfCellSpecificAntennaPorts_value = map[string]int32{
		"UNKNOWN_NUMBER_OF_CELL_SPECIFIC_ANTENNA_PORTS": 0,
		"V1_ANT_PRT": 1,
		"V2_ANT_PRT": 2,
		"V4_ANT_PRT": 4,
	}
)

func (x NumberOfCellSpecificAntennaPorts) Enum() *NumberOfCellSpecificAntennaPorts {
	p := new(NumberOfCellSpecificAntennaPorts)
	*p = x
	return p
}

func (x NumberOfCellSpecificAntennaPorts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberOfCellSpecificAntennaPorts) Descriptor() protoreflect.EnumDescriptor {
	return file_ran_load_information_proto_enumTypes[2].Descriptor()
}

func (NumberOfCellSpecificAntennaPorts) Type() protoreflect.EnumType {
	return &file_ran_load_information_proto_enumTypes[2]
}

func (x NumberOfCellSpecificAntennaPorts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberOfCellSpecificAntennaPorts.Descriptor instead.
func (NumberOfCellSpecificAntennaPorts) EnumDescriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{2}
}

type AbsInformationMode int32

const (
	AbsInformationMode_UNKNOWN_ABS_INFORMATION_MODE AbsInformationMode = 0
	AbsInformationMode_ABS_INFO_FDD                 AbsInformationMode = 1
	AbsInformationMode_ABS_INFO_TDD                 AbsInformationMode = 2
	AbsInformationMode_ABS_INACTIVE                 AbsInformationMode = 3
)

// Enum value maps for AbsInformationMode.
var (
	AbsInformationMode_name = map[int32]string{
		0: "UNKNOWN_ABS_INFORMATION_MODE",
		1: "ABS_INFO_FDD",
		2: "ABS_INFO_TDD",
		3: "ABS_INACTIVE",
	}
	AbsInformationMode_value = map[string]int32{
		"UNKNOWN_ABS_INFORMATION_MODE": 0,
		"ABS_INFO_FDD":                 1,
		"ABS_INFO_TDD":                 2,
		"ABS_INACTIVE":                 3,
	}
)

func (x AbsInformationMode) Enum() *AbsInformationMode {
	p := new(AbsInformationMode)
	*p = x
	return p
}

func (x AbsInformationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbsInformationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ran_load_information_proto_enumTypes[3].Descriptor()
}

func (AbsInformationMode) Type() protoreflect.EnumType {
	return &file_ran_load_information_proto_enumTypes[3]
}

func (x AbsInformationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbsInformationMode.Descriptor instead.
func (AbsInformationMode) EnumDescriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{3}
}

// 9.2.55
type InvokeIndication int32

const (
	InvokeIndication_UNKNOWN_INVOKE_INDICATION InvokeIndication = 0
	InvokeIndication_ABS_INFORMATION           InvokeIndication = 1
	InvokeIndication_START_NAICS_INFORMATION   InvokeIndication = 2
	InvokeIndication_STOP_NAICS_INFORMATION    InvokeIndication = 3
)

// Enum value maps for InvokeIndication.
var (
	InvokeIndication_name = map[int32]string{
		0: "UNKNOWN_INVOKE_INDICATION",
		1: "ABS_INFORMATION",
		2: "START_NAICS_INFORMATION",
		3: "STOP_NAICS_INFORMATION",
	}
	InvokeIndication_value = map[string]int32{
		"UNKNOWN_INVOKE_INDICATION": 0,
		"ABS_INFORMATION":           1,
		"START_NAICS_INFORMATION":   2,
		"STOP_NAICS_INFORMATION":    3,
	}
)

func (x InvokeIndication) Enum() *InvokeIndication {
	p := new(InvokeIndication)
	*p = x
	return p
}

func (x InvokeIndication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvokeIndication) Descriptor() protoreflect.EnumDescriptor {
	return file_ran_load_information_proto_enumTypes[4].Descriptor()
}

func (InvokeIndication) Type() protoreflect.EnumType {
	return &file_ran_load_information_proto_enumTypes[4]
}

func (x InvokeIndication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvokeIndication.Descriptor instead.
func (InvokeIndication) EnumDescriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{4}
}

type NaicsState int32

const (
	NaicsState_UNKNOWN_NAICS_STATE NaicsState = 0
	NaicsState_NAICS_ACTIVE        NaicsState = 1
	NaicsState_NAICS_INACTIVE      NaicsState = 2
)

// Enum value maps for NaicsState.
var (
	NaicsState_name = map[int32]string{
		0: "UNKNOWN_NAICS_STATE",
		1: "NAICS_ACTIVE",
		2: "NAICS_INACTIVE",
	}
	NaicsState_value = map[string]int32{
		"UNKNOWN_NAICS_STATE": 0,
		"NAICS_ACTIVE":        1,
		"NAICS_INACTIVE":      2,
	}
)

func (x NaicsState) Enum() *NaicsState {
	p := new(NaicsState)
	*p = x
	return p
}

func (x NaicsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NaicsState) Descriptor() protoreflect.EnumDescriptor {
	return file_ran_load_information_proto_enumTypes[5].Descriptor()
}

func (NaicsState) Type() protoreflect.EnumType {
	return &file_ran_load_information_proto_enumTypes[5]
}

func (x NaicsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NaicsState.Descriptor instead.
func (NaicsState) EnumDescriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{5}
}

type PA int32

const (
	PA_UNKNOWN_PA      PA = 0
	PA_DB_NEG_6        PA = 1
	PA_DB_NEG_4_DOT_77 PA = 2
	PA_DB_NEG_3        PA = 3
	PA_DB_NEG_1_DOT_77 PA = 4
	PA_DB_0            PA = 5
	PA_DB_1            PA = 6
	PA_DB_2            PA = 7
	PA_DB_3            PA = 8
)

// Enum value maps for PA.
var (
	PA_name = map[int32]string{
		0: "UNKNOWN_PA",
		1: "DB_NEG_6",
		2: "DB_NEG_4_DOT_77",
		3: "DB_NEG_3",
		4: "DB_NEG_1_DOT_77",
		5: "DB_0",
		6: "DB_1",
		7: "DB_2",
		8: "DB_3",
	}
	PA_value = map[string]int32{
		"UNKNOWN_PA":      0,
		"DB_NEG_6":        1,
		"DB_NEG_4_DOT_77": 2,
		"DB_NEG_3":        3,
		"DB_NEG_1_DOT_77": 4,
		"DB_0":            5,
		"DB_1":            6,
		"DB_2":            7,
		"DB_3":            8,
	}
)

func (x PA) Enum() *PA {
	p := new(PA)
	*p = x
	return p
}

func (x PA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PA) Descriptor() protoreflect.EnumDescriptor {
	return file_ran_load_information_proto_enumTypes[6].Descriptor()
}

func (PA) Type() protoreflect.EnumType {
	return &file_ran_load_information_proto_enumTypes[6]
}

func (x PA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PA.Descriptor instead.
func (PA) EnumDescriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{6}
}

// 9.1.2.1
type RanLoadInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadTimestamp uint64                 `protobuf:"varint,1,opt,name=load_timestamp,json=loadTimestamp,proto3" json:"load_timestamp,omitempty"`
	CellLoadInfos []*CellLoadInformation `protobuf:"bytes,2,rep,name=cell_load_infos,json=cellLoadInfos,proto3" json:"cell_load_infos,omitempty"`
}

func (x *RanLoadInformation) Reset() {
	*x = RanLoadInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanLoadInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanLoadInformation) ProtoMessage() {}

func (x *RanLoadInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanLoadInformation.ProtoReflect.Descriptor instead.
func (*RanLoadInformation) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{0}
}

func (x *RanLoadInformation) GetLoadTimestamp() uint64 {
	if x != nil {
		return x.LoadTimestamp
	}
	return 0
}

func (x *RanLoadInformation) GetCellLoadInfos() []*CellLoadInformation {
	if x != nil {
		return x.CellLoadInfos
	}
	return nil
}

type CellLoadInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId                             string                              `protobuf:"bytes,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	UlInterferenceOverloadIndications  []UlInterferenceOverloadIndication  `protobuf:"varint,2,rep,packed,name=ul_interference_overload_indications,json=ulInterferenceOverloadIndications,proto3,enum=entities.UlInterferenceOverloadIndication" json:"ul_interference_overload_indications,omitempty"`
	UlHighInterferenceInfos            []*UlHighInterferenceInformation    `protobuf:"bytes,3,rep,name=ul_high_interference_infos,json=ulHighInterferenceInfos,proto3" json:"ul_high_interference_infos,omitempty"`
	RelativeNarrowbandTxPower          *RelativeNarrowbandTxPower          `protobuf:"bytes,4,opt,name=relative_narrowband_tx_power,json=relativeNarrowbandTxPower,proto3" json:"relative_narrowband_tx_power,omitempty"`
	AbsInformation                     *AbsInformation                     `protobuf:"bytes,5,opt,name=abs_information,json=absInformation,proto3" json:"abs_information,omitempty"`
	InvokeIndication                   InvokeIndication                    `protobuf:"varint,6,opt,name=invoke_indication,json=invokeIndication,proto3,enum=entities.InvokeIndication" json:"invoke_indication,omitempty"`
	IntendedUlDlConfiguration          SubframeAssignment                  `protobuf:"varint,7,opt,name=intended_ul_dl_configuration,json=intendedUlDlConfiguration,proto3,enum=entities.SubframeAssignment" json:"intended_ul_dl_configuration,omitempty"` // TODO: import type
	ExtendedUlInterferenceOverloadInfo *ExtendedUlInterferenceOverloadInfo `protobuf:"bytes,8,opt,name=extended_ul_interference_overload_info,json=extendedUlInterferenceOverloadInfo,proto3" json:"extended_ul_interference_overload_info,omitempty"`
	CompInformation                    *CompInformation                    `protobuf:"bytes,9,opt,name=comp_information,json=compInformation,proto3" json:"comp_information,omitempty"`
	DynamicDlTransmissionInformation   *DynamicDlTransmissionInformation   `protobuf:"bytes,10,opt,name=dynamic_dl_transmission_information,json=dynamicDlTransmissionInformation,proto3" json:"dynamic_dl_transmission_information,omitempty"`
}

func (x *CellLoadInformation) Reset() {
	*x = CellLoadInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellLoadInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellLoadInformation) ProtoMessage() {}

func (x *CellLoadInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellLoadInformation.ProtoReflect.Descriptor instead.
func (*CellLoadInformation) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{1}
}

func (x *CellLoadInformation) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

func (x *CellLoadInformation) GetUlInterferenceOverloadIndications() []UlInterferenceOverloadIndication {
	if x != nil {
		return x.UlInterferenceOverloadIndications
	}
	return nil
}

func (x *CellLoadInformation) GetUlHighInterferenceInfos() []*UlHighInterferenceInformation {
	if x != nil {
		return x.UlHighInterferenceInfos
	}
	return nil
}

func (x *CellLoadInformation) GetRelativeNarrowbandTxPower() *RelativeNarrowbandTxPower {
	if x != nil {
		return x.RelativeNarrowbandTxPower
	}
	return nil
}

func (x *CellLoadInformation) GetAbsInformation() *AbsInformation {
	if x != nil {
		return x.AbsInformation
	}
	return nil
}

func (x *CellLoadInformation) GetInvokeIndication() InvokeIndication {
	if x != nil {
		return x.InvokeIndication
	}
	return InvokeIndication_UNKNOWN_INVOKE_INDICATION
}

func (x *CellLoadInformation) GetIntendedUlDlConfiguration() SubframeAssignment {
	if x != nil {
		return x.IntendedUlDlConfiguration
	}
	return SubframeAssignment_UNKNOWN_SUBFRAME_ASSIGNMENT
}

func (x *CellLoadInformation) GetExtendedUlInterferenceOverloadInfo() *ExtendedUlInterferenceOverloadInfo {
	if x != nil {
		return x.ExtendedUlInterferenceOverloadInfo
	}
	return nil
}

func (x *CellLoadInformation) GetCompInformation() *CompInformation {
	if x != nil {
		return x.CompInformation
	}
	return nil
}

func (x *CellLoadInformation) GetDynamicDlTransmissionInformation() *DynamicDlTransmissionInformation {
	if x != nil {
		return x.DynamicDlTransmissionInformation
	}
	return nil
}

// 9.2.18
type UlHighInterferenceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetCellId                 string `protobuf:"bytes,1,opt,name=target_cell_id,json=targetCellId,proto3" json:"target_cell_id,omitempty"`
	UlHighInterferenceIndication string `protobuf:"bytes,2,opt,name=ul_high_interference_indication,json=ulHighInterferenceIndication,proto3" json:"ul_high_interference_indication,omitempty"`
}

func (x *UlHighInterferenceInformation) Reset() {
	*x = UlHighInterferenceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UlHighInterferenceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UlHighInterferenceInformation) ProtoMessage() {}

func (x *UlHighInterferenceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UlHighInterferenceInformation.ProtoReflect.Descriptor instead.
func (*UlHighInterferenceInformation) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{2}
}

func (x *UlHighInterferenceInformation) GetTargetCellId() string {
	if x != nil {
		return x.TargetCellId
	}
	return ""
}

func (x *UlHighInterferenceInformation) GetUlHighInterferenceIndication() string {
	if x != nil {
		return x.UlHighInterferenceIndication
	}
	return ""
}

// 9.2.19
type RelativeNarrowbandTxPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RntpPerPrb                       string                           `protobuf:"bytes,1,opt,name=rntp_per_prb,json=rntpPerPrb,proto3" json:"rntp_per_prb,omitempty"`
	RntpThreshold                    RntpThreshold                    `protobuf:"varint,2,opt,name=rntp_threshold,json=rntpThreshold,proto3,enum=entities.RntpThreshold" json:"rntp_threshold,omitempty"`
	NumberOfCellSpecificAntennaPorts NumberOfCellSpecificAntennaPorts `protobuf:"varint,3,opt,name=number_of_cell_specific_antenna_ports,json=numberOfCellSpecificAntennaPorts,proto3,enum=entities.NumberOfCellSpecificAntennaPorts" json:"number_of_cell_specific_antenna_ports,omitempty"`
	PB                               uint32                           `protobuf:"varint,4,opt,name=p_b,json=pB,proto3" json:"p_b,omitempty"`
	PdcchInterferenceImpact          uint32                           `protobuf:"varint,5,opt,name=pdcch_interference_impact,json=pdcchInterferenceImpact,proto3" json:"pdcch_interference_impact,omitempty"`
	EnhancedRntp                     *EnhancedRntp                    `protobuf:"bytes,6,opt,name=enhanced_rntp,json=enhancedRntp,proto3" json:"enhanced_rntp,omitempty"`
}

func (x *RelativeNarrowbandTxPower) Reset() {
	*x = RelativeNarrowbandTxPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeNarrowbandTxPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeNarrowbandTxPower) ProtoMessage() {}

func (x *RelativeNarrowbandTxPower) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeNarrowbandTxPower.ProtoReflect.Descriptor instead.
func (*RelativeNarrowbandTxPower) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{3}
}

func (x *RelativeNarrowbandTxPower) GetRntpPerPrb() string {
	if x != nil {
		return x.RntpPerPrb
	}
	return ""
}

func (x *RelativeNarrowbandTxPower) GetRntpThreshold() RntpThreshold {
	if x != nil {
		return x.RntpThreshold
	}
	return RntpThreshold_UNKNOWN_RNTP_THRESHOLD
}

func (x *RelativeNarrowbandTxPower) GetNumberOfCellSpecificAntennaPorts() NumberOfCellSpecificAntennaPorts {
	if x != nil {
		return x.NumberOfCellSpecificAntennaPorts
	}
	return NumberOfCellSpecificAntennaPorts_UNKNOWN_NUMBER_OF_CELL_SPECIFIC_ANTENNA_PORTS
}

func (x *RelativeNarrowbandTxPower) GetPB() uint32 {
	if x != nil {
		return x.PB
	}
	return 0
}

func (x *RelativeNarrowbandTxPower) GetPdcchInterferenceImpact() uint32 {
	if x != nil {
		return x.PdcchInterferenceImpact
	}
	return 0
}

func (x *RelativeNarrowbandTxPower) GetEnhancedRntp() *EnhancedRntp {
	if x != nil {
		return x.EnhancedRntp
	}
	return nil
}

type EnhancedRntp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnhancedRntpBitmap     string        `protobuf:"bytes,1,opt,name=enhanced_rntp_bitmap,json=enhancedRntpBitmap,proto3" json:"enhanced_rntp_bitmap,omitempty"`
	RntpHighPowerThreshold RntpThreshold `protobuf:"varint,2,opt,name=rntp_high_power_threshold,json=rntpHighPowerThreshold,proto3,enum=entities.RntpThreshold" json:"rntp_high_power_threshold,omitempty"`
	EnhancedRntpStartTime  *StartTime    `protobuf:"bytes,3,opt,name=enhanced_rntp_start_time,json=enhancedRntpStartTime,proto3" json:"enhanced_rntp_start_time,omitempty"`
}

func (x *EnhancedRntp) Reset() {
	*x = EnhancedRntp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnhancedRntp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnhancedRntp) ProtoMessage() {}

func (x *EnhancedRntp) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnhancedRntp.ProtoReflect.Descriptor instead.
func (*EnhancedRntp) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{4}
}

func (x *EnhancedRntp) GetEnhancedRntpBitmap() string {
	if x != nil {
		return x.EnhancedRntpBitmap
	}
	return ""
}

func (x *EnhancedRntp) GetRntpHighPowerThreshold() RntpThreshold {
	if x != nil {
		return x.RntpHighPowerThreshold
	}
	return RntpThreshold_UNKNOWN_RNTP_THRESHOLD
}

func (x *EnhancedRntp) GetEnhancedRntpStartTime() *StartTime {
	if x != nil {
		return x.EnhancedRntpStartTime
	}
	return nil
}

type StartTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartSfn            int32 `protobuf:"varint,1,opt,name=start_sfn,json=startSfn,proto3" json:"start_sfn,omitempty"`
	StartSubframeNumber int32 `protobuf:"varint,2,opt,name=start_subframe_number,json=startSubframeNumber,proto3" json:"start_subframe_number,omitempty"`
}

func (x *StartTime) Reset() {
	*x = StartTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTime) ProtoMessage() {}

func (x *StartTime) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTime.ProtoReflect.Descriptor instead.
func (*StartTime) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{5}
}

func (x *StartTime) GetStartSfn() int32 {
	if x != nil {
		return x.StartSfn
	}
	return 0
}

func (x *StartTime) GetStartSubframeNumber() int32 {
	if x != nil {
		return x.StartSubframeNumber
	}
	return 0
}

// 9.2.54
type AbsInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode                             AbsInformationMode               `protobuf:"varint,1,opt,name=mode,proto3,enum=entities.AbsInformationMode" json:"mode,omitempty"`
	AbsPatternInfo                   string                           `protobuf:"bytes,2,opt,name=abs_pattern_info,json=absPatternInfo,proto3" json:"abs_pattern_info,omitempty"`
	NumberOfCellSpecificAntennaPorts NumberOfCellSpecificAntennaPorts `protobuf:"varint,3,opt,name=number_of_cell_specific_antenna_ports,json=numberOfCellSpecificAntennaPorts,proto3,enum=entities.NumberOfCellSpecificAntennaPorts" json:"number_of_cell_specific_antenna_ports,omitempty"`
	MeasurementSubset                string                           `protobuf:"bytes,4,opt,name=measurement_subset,json=measurementSubset,proto3" json:"measurement_subset,omitempty"`
}

func (x *AbsInformation) Reset() {
	*x = AbsInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbsInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsInformation) ProtoMessage() {}

func (x *AbsInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsInformation.ProtoReflect.Descriptor instead.
func (*AbsInformation) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{6}
}

func (x *AbsInformation) GetMode() AbsInformationMode {
	if x != nil {
		return x.Mode
	}
	return AbsInformationMode_UNKNOWN_ABS_INFORMATION_MODE
}

func (x *AbsInformation) GetAbsPatternInfo() string {
	if x != nil {
		return x.AbsPatternInfo
	}
	return ""
}

func (x *AbsInformation) GetNumberOfCellSpecificAntennaPorts() NumberOfCellSpecificAntennaPorts {
	if x != nil {
		return x.NumberOfCellSpecificAntennaPorts
	}
	return NumberOfCellSpecificAntennaPorts_UNKNOWN_NUMBER_OF_CELL_SPECIFIC_ANTENNA_PORTS
}

func (x *AbsInformation) GetMeasurementSubset() string {
	if x != nil {
		return x.MeasurementSubset
	}
	return ""
}

// 9.2.67
type ExtendedUlInterferenceOverloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociatedSubframes                       string                             `protobuf:"bytes,1,opt,name=associated_subframes,json=associatedSubframes,proto3" json:"associated_subframes,omitempty"`
	ExtendedUlInterferenceOverloadIndications []UlInterferenceOverloadIndication `protobuf:"varint,2,rep,packed,name=extended_ul_interference_overload_indications,json=extendedUlInterferenceOverloadIndications,proto3,enum=entities.UlInterferenceOverloadIndication" json:"extended_ul_interference_overload_indications,omitempty"`
}

func (x *ExtendedUlInterferenceOverloadInfo) Reset() {
	*x = ExtendedUlInterferenceOverloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedUlInterferenceOverloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedUlInterferenceOverloadInfo) ProtoMessage() {}

func (x *ExtendedUlInterferenceOverloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedUlInterferenceOverloadInfo.ProtoReflect.Descriptor instead.
func (*ExtendedUlInterferenceOverloadInfo) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{7}
}

func (x *ExtendedUlInterferenceOverloadInfo) GetAssociatedSubframes() string {
	if x != nil {
		return x.AssociatedSubframes
	}
	return ""
}

func (x *ExtendedUlInterferenceOverloadInfo) GetExtendedUlInterferenceOverloadIndications() []UlInterferenceOverloadIndication {
	if x != nil {
		return x.ExtendedUlInterferenceOverloadIndications
	}
	return nil
}

// 9.2.74
type CompInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompInformationItems     []*CompInformationItem `protobuf:"bytes,1,rep,name=comp_information_items,json=compInformationItems,proto3" json:"comp_information_items,omitempty"`
	CompInformationStartTime *StartTime             `protobuf:"bytes,2,opt,name=comp_information_start_time,json=compInformationStartTime,proto3" json:"comp_information_start_time,omitempty"`
}

func (x *CompInformation) Reset() {
	*x = CompInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompInformation) ProtoMessage() {}

func (x *CompInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompInformation.ProtoReflect.Descriptor instead.
func (*CompInformation) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{8}
}

func (x *CompInformation) GetCompInformationItems() []*CompInformationItem {
	if x != nil {
		return x.CompInformationItems
	}
	return nil
}

func (x *CompInformation) GetCompInformationStartTime() *StartTime {
	if x != nil {
		return x.CompInformationStartTime
	}
	return nil
}

type CompInformationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompHypothesisSets []*CompHypothesisSet `protobuf:"bytes,1,rep,name=comp_hypothesis_sets,json=compHypothesisSets,proto3" json:"comp_hypothesis_sets,omitempty"`
	BenefitMetric      int32                `protobuf:"varint,2,opt,name=benefit_metric,json=benefitMetric,proto3" json:"benefit_metric,omitempty"`
}

func (x *CompInformationItem) Reset() {
	*x = CompInformationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompInformationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompInformationItem) ProtoMessage() {}

func (x *CompInformationItem) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompInformationItem.ProtoReflect.Descriptor instead.
func (*CompInformationItem) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{9}
}

func (x *CompInformationItem) GetCompHypothesisSets() []*CompHypothesisSet {
	if x != nil {
		return x.CompHypothesisSets
	}
	return nil
}

func (x *CompInformationItem) GetBenefitMetric() int32 {
	if x != nil {
		return x.BenefitMetric
	}
	return 0
}

type CompHypothesisSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId         string `protobuf:"bytes,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	CompHypothesis string `protobuf:"bytes,2,opt,name=comp_hypothesis,json=compHypothesis,proto3" json:"comp_hypothesis,omitempty"`
}

func (x *CompHypothesisSet) Reset() {
	*x = CompHypothesisSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompHypothesisSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompHypothesisSet) ProtoMessage() {}

func (x *CompHypothesisSet) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompHypothesisSet.ProtoReflect.Descriptor instead.
func (*CompHypothesisSet) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{10}
}

func (x *CompHypothesisSet) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

func (x *CompHypothesisSet) GetCompHypothesis() string {
	if x != nil {
		return x.CompHypothesis
	}
	return ""
}

// 9.2.77
type DynamicDlTransmissionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             NaicsState `protobuf:"varint,1,opt,name=state,proto3,enum=entities.NaicsState" json:"state,omitempty"`
	TransmissionModes string     `protobuf:"bytes,2,opt,name=transmission_modes,json=transmissionModes,proto3" json:"transmission_modes,omitempty"`
	PB                uint32     `protobuf:"varint,3,opt,name=p_b,json=pB,proto3" json:"p_b,omitempty"`
	PAList            []PA       `protobuf:"varint,4,rep,packed,name=p_a_list,json=pAList,proto3,enum=entities.PA" json:"p_a_list,omitempty"`
}

func (x *DynamicDlTransmissionInformation) Reset() {
	*x = DynamicDlTransmissionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ran_load_information_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicDlTransmissionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicDlTransmissionInformation) ProtoMessage() {}

func (x *DynamicDlTransmissionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ran_load_information_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicDlTransmissionInformation.ProtoReflect.Descriptor instead.
func (*DynamicDlTransmissionInformation) Descriptor() ([]byte, []int) {
	return file_ran_load_information_proto_rawDescGZIP(), []int{11}
}

func (x *DynamicDlTransmissionInformation) GetState() NaicsState {
	if x != nil {
		return x.State
	}
	return NaicsState_UNKNOWN_NAICS_STATE
}

func (x *DynamicDlTransmissionInformation) GetTransmissionModes() string {
	if x != nil {
		return x.TransmissionModes
	}
	return ""
}

func (x *DynamicDlTransmissionInformation) GetPB() uint32 {
	if x != nil {
		return x.PB
	}
	return 0
}

func (x *DynamicDlTransmissionInformation) GetPAList() []PA {
	if x != nil {
		return x.PAList
	}
	return nil
}

var File_ran_load_information_proto protoreflect.FileDescriptor

var file_ran_load_information_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x09, 0x65, 0x6e, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x45, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xa6, 0x07, 0x0a, 0x13, 0x43, 0x65, 0x6c, 0x6c, 0x4c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x24, 0x75, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x55, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x21, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x1a, 0x75, 0x6c, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x55, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x75, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x64, 0x0a, 0x1c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x62, 0x61, 0x6e,
	0x64, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x78,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x0f, 0x61, 0x62, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x62, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x62, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1c,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x6c, 0x5f, 0x64, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x6c, 0x44, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x26,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x55, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x22, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x55, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x23, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x64, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x44, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x8c, 0x01, 0x0a, 0x1d, 0x55, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x75, 0x6c, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x75, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84,
	0x03, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x6e, 0x74, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x6e, 0x74, 0x70, 0x50, 0x65, 0x72, 0x50, 0x72, 0x62, 0x12, 0x3e,
	0x0a, 0x0e, 0x72, 0x6e, 0x74, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x6e, 0x74, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x0d, 0x72, 0x6e, 0x74, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x7b,
	0x0a, 0x25, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x03, 0x70,
	0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x42, 0x12, 0x3a, 0x0a, 0x19,
	0x70, 0x64, 0x63, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x70, 0x64, 0x63, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x6e, 0x74, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x52, 0x6e, 0x74, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x52, 0x6e, 0x74, 0x70, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x52, 0x6e, 0x74, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x72, 0x6e, 0x74, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x6e,
	0x74, 0x70, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x19, 0x72, 0x6e, 0x74, 0x70,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x6e, 0x74, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x52, 0x16, 0x72, 0x6e, 0x74, 0x70, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x18,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x15, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x6e, 0x74,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x66, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x41, 0x62, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x62, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x62, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x62, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7b, 0x0a, 0x25, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x65, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x22, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x55, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x8c, 0x01,
	0x0a, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x55, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x29, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x18, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x48,
	0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x55, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x48,
	0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x68, 0x79,
	0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x22, 0xb6,
	0x01, 0x0a, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4e, 0x61,
	0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0f,
	0x0a, 0x03, 0x70, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x42, 0x12,
	0x26, 0x0a, 0x08, 0x70, 0x5f, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x41, 0x52,
	0x06, 0x70, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x99, 0x01, 0x0a, 0x20, 0x55, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x2b,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x10, 0x03, 0x2a, 0xd8, 0x01, 0x0a, 0x0d, 0x52, 0x6e, 0x74, 0x70, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x52, 0x4e, 0x54, 0x50, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x47, 0x5f, 0x31, 0x31, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x47, 0x5f, 0x31, 0x30, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4e,
	0x45, 0x47, 0x5f, 0x39, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x47, 0x5f, 0x38, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x47, 0x5f, 0x37, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x4e, 0x45, 0x47, 0x5f, 0x36, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x47, 0x5f, 0x35,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x47, 0x5f, 0x34, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x45, 0x47, 0x5f, 0x33, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x47, 0x5f,
	0x32, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x47, 0x5f, 0x31, 0x10, 0x0c, 0x12, 0x06,
	0x0a, 0x02, 0x56, 0x30, 0x10, 0x0d, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x31, 0x10, 0x0e, 0x12, 0x06,
	0x0a, 0x02, 0x56, 0x32, 0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x33, 0x10, 0x10, 0x2a, 0x85,
	0x01, 0x0a, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x2d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x54, 0x45, 0x4e, 0x4e, 0x41, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x31, 0x5f, 0x41, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x32, 0x5f, 0x41, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x34, 0x5f, 0x41, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x54, 0x10, 0x04, 0x2a, 0x6c, 0x0a, 0x12, 0x41, 0x62, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x42, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x42, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x44, 0x44, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x44, 0x44,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x03, 0x2a, 0x7f, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x42, 0x53, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4e, 0x41, 0x49, 0x43, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x4e, 0x41, 0x49, 0x43, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x4b, 0x0a, 0x0a, 0x4e, 0x61, 0x69, 0x63, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e,
	0x41, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x41, 0x49, 0x43, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x41, 0x49, 0x43, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x02, 0x50, 0x41, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x41, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x42, 0x5f,
	0x4e, 0x45, 0x47, 0x5f, 0x36, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x4e, 0x45,
	0x47, 0x5f, 0x34, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x37, 0x37, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x42, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x42,
	0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x31, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x37, 0x37, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x42, 0x5f, 0x30, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x42, 0x5f,
	0x31, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x42, 0x5f, 0x32, 0x10, 0x07, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x42, 0x5f, 0x33, 0x10, 0x08, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ran_load_information_proto_rawDescOnce sync.Once
	file_ran_load_information_proto_rawDescData = file_ran_load_information_proto_rawDesc
)

func file_ran_load_information_proto_rawDescGZIP() []byte {
	file_ran_load_information_proto_rawDescOnce.Do(func() {
		file_ran_load_information_proto_rawDescData = protoimpl.X.CompressGZIP(file_ran_load_information_proto_rawDescData)
	})
	return file_ran_load_information_proto_rawDescData
}

var file_ran_load_information_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_ran_load_information_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ran_load_information_proto_goTypes = []interface{}{
	(UlInterferenceOverloadIndication)(0),      // 0: entities.UlInterferenceOverloadIndication
	(RntpThreshold)(0),                         // 1: entities.RntpThreshold
	(NumberOfCellSpecificAntennaPorts)(0),      // 2: entities.NumberOfCellSpecificAntennaPorts
	(AbsInformationMode)(0),                    // 3: entities.AbsInformationMode
	(InvokeIndication)(0),                      // 4: entities.InvokeIndication
	(NaicsState)(0),                            // 5: entities.NaicsState
	(PA)(0),                                    // 6: entities.PA
	(*RanLoadInformation)(nil),                 // 7: entities.RanLoadInformation
	(*CellLoadInformation)(nil),                // 8: entities.CellLoadInformation
	(*UlHighInterferenceInformation)(nil),      // 9: entities.UlHighInterferenceInformation
	(*RelativeNarrowbandTxPower)(nil),          // 10: entities.RelativeNarrowbandTxPower
	(*EnhancedRntp)(nil),                       // 11: entities.EnhancedRntp
	(*StartTime)(nil),                          // 12: entities.StartTime
	(*AbsInformation)(nil),                     // 13: entities.AbsInformation
	(*ExtendedUlInterferenceOverloadInfo)(nil), // 14: entities.ExtendedUlInterferenceOverloadInfo
	(*CompInformation)(nil),                    // 15: entities.CompInformation
	(*CompInformationItem)(nil),                // 16: entities.CompInformationItem
	(*CompHypothesisSet)(nil),                  // 17: entities.CompHypothesisSet
	(*DynamicDlTransmissionInformation)(nil),   // 18: entities.DynamicDlTransmissionInformation
	(SubframeAssignment)(0),                    // 19: entities.SubframeAssignment
}
var file_ran_load_information_proto_depIdxs = []int32{
	8,  // 0: entities.RanLoadInformation.cell_load_infos:type_name -> entities.CellLoadInformation
	0,  // 1: entities.CellLoadInformation.ul_interference_overload_indications:type_name -> entities.UlInterferenceOverloadIndication
	9,  // 2: entities.CellLoadInformation.ul_high_interference_infos:type_name -> entities.UlHighInterferenceInformation
	10, // 3: entities.CellLoadInformation.relative_narrowband_tx_power:type_name -> entities.RelativeNarrowbandTxPower
	13, // 4: entities.CellLoadInformation.abs_information:type_name -> entities.AbsInformation
	4,  // 5: entities.CellLoadInformation.invoke_indication:type_name -> entities.InvokeIndication
	19, // 6: entities.CellLoadInformation.intended_ul_dl_configuration:type_name -> entities.SubframeAssignment
	14, // 7: entities.CellLoadInformation.extended_ul_interference_overload_info:type_name -> entities.ExtendedUlInterferenceOverloadInfo
	15, // 8: entities.CellLoadInformation.comp_information:type_name -> entities.CompInformation
	18, // 9: entities.CellLoadInformation.dynamic_dl_transmission_information:type_name -> entities.DynamicDlTransmissionInformation
	1,  // 10: entities.RelativeNarrowbandTxPower.rntp_threshold:type_name -> entities.RntpThreshold
	2,  // 11: entities.RelativeNarrowbandTxPower.number_of_cell_specific_antenna_ports:type_name -> entities.NumberOfCellSpecificAntennaPorts
	11, // 12: entities.RelativeNarrowbandTxPower.enhanced_rntp:type_name -> entities.EnhancedRntp
	1,  // 13: entities.EnhancedRntp.rntp_high_power_threshold:type_name -> entities.RntpThreshold
	12, // 14: entities.EnhancedRntp.enhanced_rntp_start_time:type_name -> entities.StartTime
	3,  // 15: entities.AbsInformation.mode:type_name -> entities.AbsInformationMode
	2,  // 16: entities.AbsInformation.number_of_cell_specific_antenna_ports:type_name -> entities.NumberOfCellSpecificAntennaPorts
	0,  // 17: entities.ExtendedUlInterferenceOverloadInfo.extended_ul_interference_overload_indications:type_name -> entities.UlInterferenceOverloadIndication
	16, // 18: entities.CompInformation.comp_information_items:type_name -> entities.CompInformationItem
	12, // 19: entities.CompInformation.comp_information_start_time:type_name -> entities.StartTime
	17, // 20: entities.CompInformationItem.comp_hypothesis_sets:type_name -> entities.CompHypothesisSet
	5,  // 21: entities.DynamicDlTransmissionInformation.state:type_name -> entities.NaicsState
	6,  // 22: entities.DynamicDlTransmissionInformation.p_a_list:type_name -> entities.PA
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_ran_load_information_proto_init() }
func file_ran_load_information_proto_init() {
	if File_ran_load_information_proto != nil {
		return
	}
	file_enb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ran_load_information_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanLoadInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellLoadInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UlHighInterferenceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeNarrowbandTxPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnhancedRntp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbsInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedUlInterferenceOverloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompInformationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompHypothesisSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ran_load_information_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicDlTransmissionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ran_load_information_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ran_load_information_proto_goTypes,
		DependencyIndexes: file_ran_load_information_proto_depIdxs,
		EnumInfos:         file_ran_load_information_proto_enumTypes,
		MessageInfos:      file_ran_load_information_proto_msgTypes,
	}.Build()
	File_ran_load_information_proto = out.File
	file_ran_load_information_proto_rawDesc = nil
	file_ran_load_information_proto_goTypes = nil
	file_ran_load_information_proto_depIdxs = nil
}
